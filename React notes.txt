React is a frontend javascript library
Setting up : 
1. Make sure node is installed , run node -v / npm -v in terminal
2. Create a next.js app using : 
    npx create-next-app@latest <name>
3. Navigate into the folder and start the development server 
    cd ....
    npm run dev


------------------------------------ Phase 1 : -------------------------------
1. JSX : javascript + XML - JSX lets us to write html-like sytax directly inside js 
    write something in src/app/hello/page.js

2. Functional Components : All Components in React (especially in Next.js app router) are written as functions: 
    function MyComponent() {
        return <h2>I am a reusable component!</h2>;
    }

    export default function HelloPage() {
    return (
        <div>
            <h1>Hello, React + Next.js!</h1>
            <MyComponent />
        </div>
    );
    }

3. Props (Data passed into componenets)
    Props lets us to pass values into componenets like function arguments 
    function Greeting(props) {
        return <p>Hello, {props.name}!</p>;
    }

    export default function HelloPage() {
    return (
        <div>
        <Greeting name="Sai" />
        <Greeting name="Venkata" />
        </div>
    );
    }

4. Conditional Rendering : Render things based on a condition (like if-else)
        function WelcomeMessage({ isLoggedIn }) {
        return (
            <div>
            {isLoggedIn ? <p>Welcome back!</p> : <p>Please log in.</p>}
            </div>
        );
        }

        export default function HelloPage() {
        return <WelcomeMessage isLoggedIn={true} />;
        }

5. List Rendering with .map()
    const names = ["Sai", "Venkata", "Raja"];
    function NameList() {
    return (
        <ul>
        {names.map((name, index) => (
            <li key={index}>{name}</li>
        ))}
        </ul>
    );
    }

    export default function HelloPage() {
    return (
        <div>
        <h2>Name List</h2>
        <NameList />
        </div>
    );
    }

6. Event Handling 
    function Button() {
        const handleClick = () => {
            alert("Button clicked!");
    };

    return <button onClick={handleClick}>Click Me</button>;
    }

    export default function HelloPage() {
    return <Button />;
    }

7. Input handling ( with useState )
        import { useState } from "react";

        export default function Practice() {
        const [inputText, setInputText] = useState("");

        function handleChange(event) {
            setInputText(event.target.value);
        }

        return (
            <div className="m-10 text-center">
            <input
                type="text"
                placeholder="Type something..."
                value={inputText}
                onChange={handleChange}
                className="border border-gray-400 px-3 py-1 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-300"
            />
            <p className="mt-4 font-medium">You typed: {inputText}</p>
            </div>
        );
        }

 
------------------------------- Phase 2 : React Hooks ------------------------------ 

1. useState : Keeps track of data that changes over time (like form input, counter, toggle)
    useState is a react component tgat lets yoy add a state variable to the component
        import { useState } from 'react';
        const [state, setState] = useState(initialVal)
            state is the current value of the state
            setState is the function to update the value
            initialVal is the starting value of the state 
            
        ex : 
        'use client'; // Required in Next.js App Router

        import { useState } from 'react';

        export default function Toggle() {
            const [isVisible, setIsVisible] = useState(true);

            return (
                <div>
                <button onClick={() => setIsVisible(!isVisible)}>
                    Toggle Message
                </button>
                {isVisible && <p>This message is toggleable.</p>}
                </div>
            );
        }

2. useEffect (side effect): runs code after the componenet renders - used for API calls, timers, logging etc.
    useEffect is a react hook that lets you synchronize / rerender a component with an external system 
    'use client';

    import { useEffect, useState } from 'react';

    export default function Timer() {
        const [count, setCount] = useState(0);

        useEffect(() => {
            const timer = setInterval(() => {
            setCount((prev) => prev + 1);
            }, 1000);

            return () => clearInterval(timer); // cleanup
        }, []);

        return <p>Timer: {count}</p>;
    }

3. useRef (stores non-rendering values) : Think of it like a box you can store stuff in — but changing it doesn’t re-render the component.
        'use client';

        import { useRef } from 'react';

        export default function InputFocus() {
        const inputRef = useRef();

        const handleClick = () => {
            inputRef.current.focus();
        };

        return (
            <div>
            <input ref={inputRef} type="text" placeholder="Click the button to focus" />
            <button onClick={handleClick}>Focus Input</button>
            </div>
        );
        }


--------------------- Phase 3 : Hooks deep dive --------------------------

4. useContext : is a hook that lets us to read and subscribe to context from the component,
                it provides a way to pass data through tree without manually passing props down through each nested component
    why useContext is useful : 
        React normally passes data from parent to child using props, but what if you need the same data in many componenets
        passing props through many layers is messy,
        so instead we use , 
            createContext() to create a shared resource(like user, theme, language)
            useContext() to access that shared data from any component

  ------- You want all parts of your app (header, footer, product cards) to use the selected theme.
   But instead of passing the theme to every component manually using props (which gets messy), you use useContext.


    step 1 : Create a context file and create the context in it .
                import { createContext } from "react";

                export const ThemeContext = createContext(); 

    step 2 : In app.js , set up the provider
        
            import { useState } from "react";
            import { ThemeContext } from "./ThemeContext";
            import Header from "./Header";

            export default function App() {
            const [theme, setTheme] = useState("light");

            function toggleTheme() {
                setTheme((prev) => (prev === "light" ? "dark" : "light"));
            }

            return (
                <ThemeContext.Provider value={theme}>
                <div className={theme === "light" ? "bg-white" : "bg-gray-800"}>
                    <button onClick={toggleTheme} className="m-4 p-2 bg-blue-200">Toggle Theme</button>
                    <Header />
                </div>
                </ThemeContext.Provider>
            );
            }

    step 3 : Access it using useContext
            import { useContext } from "react";
            import { ThemeContext } from "./ThemeContext";

            export default function Header() {
            const theme = useContext(ThemeContext); // accessing the current theme

            return (
                <h1 className={`text-2xl p-4 ${theme === "light" ? "text-black" : "text-white"}`}>
                This is the Header - Current Theme: {theme}
                </h1>
            );
            }


5. useReducer : is similar to useState, it allows for custom state logics, it is used for managing more complex state logic and especially when 
                                                                                the next stated depends on previous oone
                                                                                multiple related state updates 
                                                                                want to group state logic in one place
        usereducer hook accepts two arguments useReducer(<reducer, <initialState>)
            the reducer function conditions the custom state logic (this decides how to update the state) and the initialState canbe a simple value but generally will contain an object.
            const [state, dispatch] = useReducer(reducer, initialState)
                dispatch(action) - triggers the state update


6. useCallback : is a react hook that returns memoised callback function, it only recreates the functions when one of its dependencies gets changed.
                This is useful for passing stable callbacks to optimized child componnents that rely on reference equality to prevent unnecessary renders 

        Parent : counterWithCallback.jsx
            'use client'
            import { useState, useCallback } from "react";
            import ChildButton from "./ChildButton";

            export default function CounterWithCallback() {
                const [count, setCount] = useState(0);
                const [other, setOther] = useState(false);

                const increment = useCallback(() => {
                    setCount(prev => prev + 1);
                }, []);

                return (
                    <div className="m-5 space-y-3">
                        <p>Count: {count}</p>
                        <ChildButton onClick={increment} />

                        <button
                            onClick={() => setOther(!other)}
                            className="bg-gray-300 px-3 py-1 rounded hover:bg-gray-400"
                        >
                            Toggle Something Unrelated
                        </button>
                    </div>
                );
            }

        Child : ChildButton.jsx
            'use client'
            import React from 'react';

            function ChildButton({ onClick }) {
                console.log("ChildButton rendered");
                return (
                    <button
                        onClick={onClick}
                        className="bg-blue-400 text-white px-4 py-1 rounded hover:bg-blue-500"
                    >
                        Increment Count
                    </button>
                );
            }

            export default React.memo(ChildButton); // Only re-renders if props change


7. useMemo : is a hook that memoize a computed value, it only recomputes the value when one of its dependencies gets changed
            this optimization helps to avoid excessive calculations on evry render.

            The useMemo and useCallback hooks are similar. the main diff is that useMemo returns a memoized values and 
                useCallback returns a memoized function.

            syntax : const memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);

8. useLayoutEffect : is like useEffect, but the key diff is 
                useEffect runs after the componenet is painted on screen 
                useLayoutEffect runs before the component is painted (synchronously, afte render but before paint )
                This means useLayoutEffect blocks the browser from painting until your code runs — useful when you need to:
                    Measure DOM layout (like element width/height)
                    Prevent visual flickering
                    Work with animations or scrolling positions


            'use client'
            import { useState, useRef, useLayoutEffect } from "react";

            export default function BoxMeasurement() {
                const boxRef = useRef(null);
                const [width, setWidth] = useState(0);

                useLayoutEffect(() => {
                    if (boxRef.current) {
                        setWidth(boxRef.current.offsetWidth);
                    }
                }, []);

                return (
                    <div className="m-5">
                        <div 
                            ref={boxRef} 
                            className="bg-green-200 px-10 py-4 rounded"
                        >
                            Resize Me!
                        </div>
                        <p className="mt-3">Box Width: {width}px</p>
                    </div>
                );
            }


9. useImperativeHandle : is a hook used with forwardRef() to allow a parent componenet to call functions inside a child component directly
            You (parent) have a remote control.
            Your TV (child) has buttons hidden inside.
            Normally, you can't press those buttons directly.
            But with useImperativeHandle, you can customize the remote to expose certain buttons (like Volume Up or Power) — only the ones you choose.

    step 1 : create customInput.js and add code 
            import React, { useRef, useImperativeHandle, forwardRef } from "react";

            const CustomInput = forwardRef((props, ref) => {
            const inputRef = useRef();

            useImperativeHandle(ref, () => ({
                focusInput: () => {
                inputRef.current.focus();
                },
                clearInput: () => {
                inputRef.current.value = "";
                }
            }));

            return <input ref={inputRef} className="border p-2" placeholder="Type something..." />;
            });

            export default CustomInput;

    step 2 : use it in page.js / whatever 

            'use client'
            import { useRef } from "react";
            import CustomInput from "./CustomInput";

            export default function Practice() {
            const inputRef = useRef();

            return (
                <div className="m-5 space-x-3">
                <CustomInput ref={inputRef} />
                <button
                    onClick={() => inputRef.current.focusInput()}
                    className="bg-blue-400 px-3 py-1 rounded text-white hover:bg-blue-500"
                >
                    Focus
                </button>
                <button
                    onClick={() => inputRef.current.clearInput()}
                    className="bg-red-400 px-3 py-1 rounded text-white hover:bg-red-500"
                >
                    Clear
                </button>
                </div>
            );
            }

10. useId : is a hook that generates a unique ID that's stable across server and client- especially useful for accessibility attributes(like id and htmlFor) or 
                form elements where uniqueness is important
            Imagine you're assigning roll numbers to students. Even if students switch seats (like React re-renders), their roll numbers (IDs) stay consistent.

            'use client'
            import { useId } from "react";

            export default function FormWithId() {
                const id = useId(); // generates a unique, stable id
                console.log("Generated id", id) // view the id at console
            return (
                <div className="m-5">
                <label htmlFor={id} className="block mb-2 font-medium">Your Email:</label>
                <input
                    id={id}
                    type="email"
                    placeholder="example@mail.com"
                    className="border px-3 py-1 rounded w-64"
                />
                </div>
            );
            }


------------------------------ Phase 4 : Forms and Input Handling -------------------

1. Controlled Components : A Controlled component is a form element(like input, textarea, or select) whose value is Controlled by react state 

            'use client'
            import { useState } from 'react';

            export default function ControlledInputExample() {
                const [name, setName] = useState("");

                function handleChange(event) {
                    setName(event.target.value);
                }

                return (
                    <div className="m-5">
                        <input
                            type="text"
                            value={name}
                            onChange={handleChange}
                            placeholder="Type your name"
                            className="border px-2 py-1 rounded"
                        />
                        <p className="mt-2">Hello, {name || "Stranger"}!</p>
                    </div>
                );
            }
The input box’s value comes from the state, not DOM directly — hence it's "controlled".


2. Form Validations and dynamic error messages 

    step 1 : Track errors in state - we'll keep an errors objects in state that holds Validations messages for each field 
    step 2 : Validate inputs on change or on submit -